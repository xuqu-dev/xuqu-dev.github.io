<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>MySQL 事务介绍</title>
    <link href="/transaction-intro/"/>
    <url>/transaction-intro/</url>
    
    <content type="html"><![CDATA[<h1 id="MySQL-事务介绍"><a href="#MySQL-事务介绍" class="headerlink" title="MySQL 事务介绍"></a>MySQL 事务介绍</h1><p>事务是一个很重要的概念，严格意义上来说在《数据库原理》这门课程中就应该已经了解清楚了，只不过我那时候没有听过课，所以现在要从头开始来学习。其实我很想问问自己，为什么之前学 <code>MySQL</code> 的用法的时候没有了解事务呢？为什么学 <code>JDBC</code> 的时候没有了解事务呢？为什么学 <code>Spring</code> 的时候没有了解事务呢？</p><p>我现在的答案还是一样，平时完全遇不到，在我的印象中事务和并发是一块的知识点，一般人谁遇得到啊？所以我学习这些东西的时候都只是粗略的看了一下，不过现在想起来感觉不太好，趁有空，这几天把事务完完全全的过一遍，把笔记做好了，就算之后忘记了也好看自己的笔记回忆。</p><h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><blockquote><p> 把多条语句作为一个整体进行操作的功能，被称为数据库<em>事务</em>。</p><p> 事务指的是满足 ACID 特性的一组操作，可以通过 Commit 提交一个事务，也可以使用 Rollback 进行回滚。</p></blockquote><p>以上分别摘自廖雪峰博客和 <code>CS-Notes</code>，看过之后感觉并不是很清楚这个概念，这里举个例子吧。平常我们使用 <code>sql</code> 删除数据的时候都会很小心的添加 <code>where</code> 限制条件，不然可能会造成整张表的记录全被删除了，这样的操作是原子性的，也就是只要我们执行这个 <code>sql</code> 之后就会产生某种结果，数据的变化就是这个操作的结果。</p><p>那么这和事务有什么关系呢？刚刚提到的是一条 <code>sql</code> ，我来删除，即使我把整张表的数据都删除了，那也是我个人承受这个结果，是一种人为的失误罢了。而有一种情况，很经典的一个例子，无论是在并发还是事务当中都可以拿出来说的转帐问题，假设 A 要给 B 转 <code>500</code> 元，那么用 <code>sql</code> 体现就是：</p><div class="code-wrapper"><pre><code class="hljs mysql">update tmp set balance&#x3D;balance-500 where name&#x3D;&#39;A&#39;;update tmp set balance&#x3D;balance+500 where name&#x3D;&#39;B&#39;;</code></pre></div><p>既然说到了并发，那我们讨论这个 <code>sql</code> 执行过程中无非就两种：</p><p>第一、都执行成功了，也就是转帐成功。</p><p>第二、 A 的余额减少的 <code>sql</code> 执行成功了，而在将要执行第二句的时候发生了异常，比如说这时候 <code>MySQL</code> 服务被我关闭了。等我把服务再启动的时候这个转帐过程早就没了，导致的结果就是 A 用户的钱减少了，而 B 用户的钱并没有增加。</p><p>所以事务就是为了避免这种情况发生的，还是这个转帐过程，我们需要这个过程中的所有 <code>sql</code> 要不都执行成功，或者不执行。廖雪峰博客的那句总结我觉得挺好的，<code>把多条语句作为一个整体进行操作的功能，被成为数据库事务。</code></p><p><img src="https://yec-dev.oss-cn-guangzhou.aliyuncs.com/image-20191207222237925.png"></p><h3 id="事务的性质"><a href="#事务的性质" class="headerlink" title="事务的性质"></a>事务的性质</h3><p>可以说是性质吧，其实这块我也不是很了解，就记得背  <code>ACID</code>…以下摘抄自 <code>CS-Notes</code></p><ol><li><p>原子性（Atomicity）</p><blockquote><p>事务被视为不可分割的最小单元，事务的所有操作要么全部提交成功，要么全部失败回滚。</p><p>回滚可以用回滚日志（Undo Log）来实现，回滚日志记录着事务所执行的修改操作，在回滚时反向执行这些修改操作即可。</p></blockquote></li><li><p>一致性（Consistency）</p><blockquote><p>数据库在事务执行前后都保持一致性状态。在一致性状态下，所有事务对同一个数据的读取结果都是相同的。</p></blockquote></li><li><p>隔离性（Isolation）</p><blockquote><p>一个事务所做的修改在最终提交以前，对其它事务是不可见的。</p><p>这里需要提到一点是，在不同的事务隔离级别下不一定满足隔离性。</p></blockquote></li><li><p>持久性（Durability）</p><blockquote><p>一旦事务提交，则其所做的修改将会永远保存到数据库中。即使系统发生崩溃，事务执行的结果也不能丢失。</p><p>系统发生崩溃可以用重做日志（Redo Log）进行恢复，从而实现持久性。与回滚日志记录数据的逻辑修改不同，重做日志记录的是数据页的物理修改。</p></blockquote></li></ol><hr><p>事务的 ACID 特性概念简单，但不是很好理解，主要是因为这几个特性不是一种平级关系：</p><ul><li>只有满足一致性，事务的执行结果才是正确的。</li><li>在无并发的情况下，事务串行执行，隔离性一定能够满足。此时只要能满足原子性，就一定能满足一致性。</li><li>在并发的情况下，多个事务并行执行，事务不仅要满足原子性，还需要满足隔离性，才能满足一致性。</li><li>事务满足持久化是为了能应对系统崩溃的情况。</li></ul><p><img src="https://yec-dev.oss-cn-guangzhou.aliyuncs.com/image-20191207210437023.png"></p><h3 id="事务的隔离级别"><a href="#事务的隔离级别" class="headerlink" title="事务的隔离级别"></a>事务的隔离级别</h3><p>首先要明确一点，上面讨论的特性的时候，执行结果是正常的前提是满足一致性，而要满足一致性分为并发以及非并发环境，如果任何时候都是串行的，那么只需要满足原子性就可以了，而这也是事务的最基本特性。但是事实就是并发环境才是讨论多的一个点，也就是变相的讨论隔离性。</p><h4 id="未提交读（READ-UNCOMMITTED）"><a href="#未提交读（READ-UNCOMMITTED）" class="headerlink" title="未提交读（READ UNCOMMITTED）"></a>未提交读（READ UNCOMMITTED）</h4><p>在这种隔离级别下，事务中的修改，即使没有提交，对其它事务也是可见的。</p><h4 id="提交读（READ-COMMITTED）"><a href="#提交读（READ-COMMITTED）" class="headerlink" title="提交读（READ COMMITTED）"></a>提交读（READ COMMITTED）</h4><p>一个事务所做的修改在提交之前对其它事务是不可见的。但一个事务能读取已经提交的事务所做的修改。</p><h4 id="可重复读（REPEATABLE-READ）"><a href="#可重复读（REPEATABLE-READ）" class="headerlink" title="可重复读（REPEATABLE READ）"></a>可重复读（REPEATABLE READ）</h4><p>保证在同一个事务中多次读取同一数据的结果是一样的。</p><h4 id="可串行化（SERIALIZABLE）"><a href="#可串行化（SERIALIZABLE）" class="headerlink" title="可串行化（SERIALIZABLE）"></a>可串行化（SERIALIZABLE）</h4><p>强制事务串行执行，这样多个事务互不干扰，不会出现并发一致性问题。</p><p>该隔离级别需要加锁实现，因为要使用加锁机制保证同一时间只有一个事务执行，也就是保证事务串行执行。</p><p><img src="https://yec-dev.oss-cn-guangzhou.aliyuncs.com/image-20191207223400787.png"></p><h3 id="并发一致性问题"><a href="#并发一致性问题" class="headerlink" title="并发一致性问题"></a>并发一致性问题</h3><p>上面先说的隔离级别需要有一定的概念，其实它们的名字就已经体现了它们所能解决的问题了。</p><p>首先明确三个并发一致性问题：脏读、不可重复读、幻影读。</p><h4 id="读脏数据"><a href="#读脏数据" class="headerlink" title="读脏数据"></a>读脏数据</h4><blockquote><p>读脏数据指在不同的事务下，当前事务可以读到另外事务未提交的数据。例如：T1 修改一个数据但未提交，T2 随后读取这个数据。如果 T1 撤销了这次修改，那么 T2 读取的数据是脏数据。</p></blockquote><p><img src="https://yec-dev.oss-cn-guangzhou.aliyuncs.com/image-20191207221920368.png"></p><h4 id="不可重复读"><a href="#不可重复读" class="headerlink" title="不可重复读"></a>不可重复读</h4><blockquote><p>不可重复读指在一个事务内多次读取同一数据集合。在这一事务还未结束前，另一事务也访问了该同一数据集合并做了修改，由于第二个事务的修改，第一次事务的两次读取的数据可能不一致。例如：T2 读取一个数据，T1 对该数据做了修改。如果 T2 再次读取这个数据，此时读取的结果和第一次读取的结果不同。</p></blockquote><p><img src="https://yec-dev.oss-cn-guangzhou.aliyuncs.com/image-20191207222102010.png"></p><h4 id="幻影读"><a href="#幻影读" class="headerlink" title="幻影读"></a>幻影读</h4><blockquote><p>幻读本质上也属于不可重复读的情况，T1 读取某个范围的数据，T2 在这个范围内插入新的数据，T1 再次读取这个范围的数据，此时读取的结果和和第一次读取的结果不同。</p><p>在一段时间内执行同一个操作得到了两个结果，这是需要避免的。</p></blockquote><p><img src="https://yec-dev.oss-cn-guangzhou.aliyuncs.com/image-20191207222134306.png"></p><hr><p>产生并发不一致性问题的主要原因是破坏了事务的隔离性，解决方法是通过并发控制来保证隔离性。并发控制可以通过封锁来实现，但是封锁操作需要用户自己控制，相当复杂。数据库管理系统提供了事务的隔离级别，让用户以一种更轻松的方式处理并发一致性问题。</p><h2 id="显式事务"><a href="#显式事务" class="headerlink" title="显式事务"></a>显式事务</h2><p>其实不做任何操作，平时使用 <code>MySQL</code> 就是已经在使用事务了。</p><p>首先查看 <code>autocommit</code> 变量：</p><div class="code-wrapper"><pre><code class="hljs mysql">select @@autocommit;</code></pre></div><p>如果得到的结果中为 <code>1</code> ，那么就意味着你的每一次操作都是自动提交一个事务的。比如说你执行了两个更新操作，那么就开启了两个事务并自动提交，比如说开启了自动提交：</p><p><img src="https://yec-dev.oss-cn-guangzhou.aliyuncs.com/DeepinScreenshot_select-area_20210128173022.png"></p><p>而如果左边的会话没有开启自动提交，右边的会话就不会查询到修改后的数据（具体要看隔离级别，就在下节）。</p><div class="code-wrapper"><pre><code class="hljs mysql">set @@session.autocommit &#x3D; 0;</code></pre></div><p><img src="https://yec-dev.oss-cn-guangzhou.aliyuncs.com/DeepinScreenshot_select-area_20210128173326.png"></p><p>另外要提一句的是 <code>MySQL</code> 只有 <code>InnoDB</code> 这个存储引擎是支持事务的，查看默认的引擎可以使用：</p><div class="code-wrapper"><pre><code class="hljs mysql">show engines;</code></pre></div><p>使用 <code>start transaction</code>  或者 <code>begin</code> 开启一个事务，最后使用 <code>commit</code> 或者 <code>rollback</code> 停止事务。</p><p>比如说 <code>jack</code> 给 <code>rose</code> 转 500 块钱。</p><div class="code-wrapper"><pre><code class="hljs mysql">start transaction; # beginupdate tmp set balance&#x3D;balance-500 where name&#x3D;&#39;jack&#39;;update tmp set balance&#x3D;balance+500 where name&#x3D;&#39;rose&#39;;commit;</code></pre></div><p>那么在没有 <code>commit</code> 的情况下这个事务就还没有停止，比如说在执行完 <code>jack</code> 减钱这一步之后，在本事务中查询是以及减去 500 的，但是你重新开一个会话就会发现金额还没有修改成功呢，直到这个事务执行结束了，在另一个会话才能看到修改结果，这是因为 <code>MySQL</code> 的默认事务隔离级别是 <code>repeatable read</code>，可以通过 <code>select @@tx_isolation;</code> 查看，这种情况下是可以避免脏读的，但是无法避免不重复读和幻影读。</p><h2 id="事务演示"><a href="#事务演示" class="headerlink" title="事务演示"></a>事务演示</h2><p>我会使用两个会话，然后开启两个回话，演示一下不同隔离级别下会出现的问题。</p><h3 id="未提交读"><a href="#未提交读" class="headerlink" title="未提交读"></a>未提交读</h3><p>这里就出现了脏读的现象，在事务隔离级别是 <code>read uncommitted</code> 的情况下，左边那个会话开启一个事务刚把 <code>jack</code> 的余额设置为 500 还没提交右边那个事务就已经看到了结果。这个之所以称之为脏读，因为左边这个事务我随时可以使用 <code>rollback</code> 回滚，那样 <code>jack</code> 的钱还是原来的 1000，所以左边读到的 500 是什么东西？</p><p><img src="https://yec-dev.oss-cn-guangzhou.aliyuncs.com/DeepinScreenshot_select-area_20210128163448.png"></p><h3 id="提交读"><a href="#提交读" class="headerlink" title="提交读"></a>提交读</h3><p>执行的先后顺序不变，我还是现在左边的会话当中开始一个事务然后修改 <code>jack</code> 的金额，然后未提交数据切换到右边的会话当中开启事务查看数据。这时已经解决了脏读的问题，也就是说在这种隔离级别下已经不用关注脏读的问题了。</p><p><img src="https://yec-dev.oss-cn-guangzhou.aliyuncs.com/DeepinScreenshot_select-area_20210128164207.png"></p><p>新的问题就是出现了不可重复读问题，也就是左边事务提交之后，右边的会话再查询结果就不一样了，这种问题也是需要避免的，在一个事务内不应该读取到两次不一样的数据。</p><p><img src="https://yec-dev.oss-cn-guangzhou.aliyuncs.com/DeepinScreenshot_select-area_20210128164642.png"></p><h3 id="可重复读"><a href="#可重复读" class="headerlink" title="可重复读"></a>可重复读</h3><p><code>repeatable read</code> 这个隔离级别就是默认的，首先左边会话开始一个事务并修改数据，即使它提交了事务，只要右边那个事务没有提交，那么读到的数据永远是当前会话开始事务前的数据，不会出现重复读这种情况。</p><p><img src="https://yec-dev.oss-cn-guangzhou.aliyuncs.com/DeepinScreenshot_select-area_20210128165451.png"></p><p>幻影读也属于不可重复读的情况，首先是左边的会话开启一个事务并且查询用户信息，然后右边会话开启事务并且插入数据查询且正常提交数据。切回左边（第7步）查询发现只有两条数据，然后执行修改数据的语句（第8步）发现影响的行数是 <strong>3</strong> ，那这是为什么，我前一行已经查询确认过了只有两条数据，这就是<strong>幻影读</strong>。</p><p><img src="https://yec-dev.oss-cn-guangzhou.aliyuncs.com/DeepinScreenshot_select-area_20210128170356.png"></p><h3 id="可串行化"><a href="#可串行化" class="headerlink" title="可串行化"></a>可串行化</h3><p>最后一种事务隔离级别，也就是给表加锁，可以避免任何问题，强行把并发工作变成非并发。</p><p>可以发现，左边照常先开启事务并且查询数据，切换到右边的会话开始事务，而当执行 <code>insert</code> 语句的时候发现它阻塞不动了，也就是无法执行。等待了一段时间（默认超时时间应该是 50s，<code>select @@innodb_lock_wait_timeout;</code>）之后提示我尝试重新尝试，于是我重新尝试发现还是失败了。再切换回左边的会话查询数据并且修改数据正常提交事务（6、7、8步），然后再回到右边添加数据发现成功了。所以幻影读的问题也解决了，但是这种事务隔离级别的效率非常低，一般情况下是不会使用的。</p><p><img src="https://yec-dev.oss-cn-guangzhou.aliyuncs.com/DeepinScreenshot_select-area_20210128171743.png"></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>ArchLinux 下使用 Fcitx5</title>
    <link href="/using-fcitx5/"/>
    <url>/using-fcitx5/</url>
    
    <content type="html"><![CDATA[<h1 id="ArchLinux-下使用-Fcitx5"><a href="#ArchLinux-下使用-Fcitx5" class="headerlink" title="ArchLinux 下使用 Fcitx5"></a>ArchLinux 下使用 Fcitx5</h1><blockquote><p>在 <code>Linux</code> 下的<strong>中文输入法</strong></p></blockquote><p><img src="https://yec-dev.oss-cn-guangzhou.aliyuncs.com/DeepinScreenshot_select-area_20201218214959.png"></p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>傻瓜式安装法，不管什么需要的不需要的全安装上，推荐直接安装 <code>fcitx5-im</code>：</p><div class="code-wrapper"><pre><code class="hljs shell">sudo pacman -S fcitx5-im</code></pre></div><p>其中包含了 <code> fcitx5</code> 、 <code>fcitx5-configtool</code> 、 <code>fcitx5-gtk</code> 、<code>fcitx5-qt</code>，主体是一定要安装的，配置工具也是一定需要的，然后就是对 <code>qt</code> 程序和 <code>gtk</code> 界面的程序也要吧，所以说这里是全要的….</p><h3 id="安装中文输入法引擎"><a href="#安装中文输入法引擎" class="headerlink" title="安装中文输入法引擎"></a>安装中文输入法引擎</h3><p>没啥好说的，虽然还有个 <code>fcitx5-rime</code> 可以选择，但我选择这个。</p><div class="code-wrapper"><pre><code class="hljs shell">sudo pacman -S fcitx5-chinese-addons</code></pre></div><h3 id="词库安装"><a href="#词库安装" class="headerlink" title="词库安装"></a>词库安装</h3><p>虽然我也不知道起没起作用，反正现实是感觉比 <code>fcitx4</code> 好多了。</p><div class="code-wrapper"><pre><code class="hljs shell">sudo pacman -S fcitx5-pinyin-zhwiki</code></pre></div><h3 id="主题配置"><a href="#主题配置" class="headerlink" title="主题配置"></a>主题配置</h3><p>没有别的选择，这个比较顺眼</p><div class="code-wrapper"><pre><code class="hljs shell">sudo pacman -S fcitx5-material-color</code></pre></div><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>傻瓜式配置，新建 <code>～/.pam_environment</code>，在其中输入：</p><div class="code-wrapper"><pre><code class="hljs text">GTK_IM_MODULE DEFAULT=fcitxQT_IM_MODULE  DEFAULT=fcitxXMODIFIERS    DEFAULT=\@im=fcitxSDL_IM_MODULE DEFAULT=fcitx</code></pre></div><p>或者是使用 <code>.xinitrc</code> ，在其中添加：</p><div class="code-wrapper"><pre><code class="hljs shell">export QT_IM_MODULE=ibus<span class="hljs-meta">#</span><span class="bash"> <span class="hljs-built_in">export</span> QT_IM_MODULE=fcitx</span>export GTK_IM_MODULE=fcitxexport XMODIFIERS=&quot;@im=fcitx&quot;export SDL_IM_MODULE=fcitxfcitx5 &amp;</code></pre></div><p>然后就 OK 了，注销用户重新登陆即可。</p><p>注意这里添加了<code>export QT_IM_MODULE=ibus</code> 是因为 wps 不能输入中文，老 bug 了，在 github 的 issue 中看到是 七月份就有了，现在也没看到解决，arch wiki 是说将这个变量设置为  <code>fcitx5</code>，但我发现没有什么作用…</p><p>虽然平时也用不到 wps，但是现在….</p><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><blockquote><p>这个输入法好像没办法在终端输入中文。不过这个打字的感觉比以前好多了….</p></blockquote><p>首先打开 <code>fcitx5-configtool</code>，然后在右侧添加拼音输入法：</p><p><img src="https://yec-dev.oss-cn-guangzhou.aliyuncs.com/DeepinScreenshot_select-area_20201218220254.png"></p><p>设置主题以及字体：Addons -&gt; UI -&gt; Classic User Interface -&gt; Theme</p><p>设置云拼音：Addons -&gt; Module -&gt; Cloud Pinyin，将 Backend 改为百度，这方面还是需要百度的。</p><p>配置单行输入：Addons -&gt; Input Method -&gt; Pinyin，将其中的 <code>show preedit within application</code> 打开即可。</p><h2 id="解决-IDEA-的问题"><a href="#解决-IDEA-的问题" class="headerlink" title="解决 IDEA 的问题"></a>解决 IDEA 的问题</h2><p>IDEA 不怎么支持中文输入法吧….七年的老毛病了到现在还是没有修改…</p><p><del>首先是环境变量 <code>QT_IM_MODULE</code> 不能为 <code>ibus</code> …</del></p><p>其次就是解决左下角偏移的问题（强迫症人不了了）</p><p>首先是下载 <a href="https://github.com/RikudouPatrickstar/JetBrainsRuntime-for-Linux-x64">JetBrainsRuntime-for-Linux-x64</a> 编译好的 jbr，然后将其解压到一个目录，最后在 <code>idea.sh</code> 添加：</p><div class="code-wrapper"><pre><code class="hljs shell">export IDEA_JDK=/home/xuqu/.local/share/JetBrains/JetBrainsRuntime</code></pre></div><p><img src="https://yec-dev.oss-cn-guangzhou.aliyuncs.com/DeepinScreenshot_select-area_20201219173046.png"></p><h3 id="无法输入中文标点符号"><a href="#无法输入中文标点符号" class="headerlink" title="无法输入中文标点符号"></a>无法输入中文标点符号</h3><blockquote><p>暂无复现，暂无解决方案</p></blockquote><p>这个问题遇到过两次了，就莫名其妙就不能输入中文标点符号了，后来发现是自己打字的时候不小心按到了什么快捷键，而我又不是很清楚这些快捷键到底是干嘛的，第一次遇到的时候直接把系统重装了。上一次遇到也是在写笔记的时候，打字一快就手脚忙乱，然后就突然发现中文标点符号没了…问题就很奇怪，然后照着百度的按了一下快捷键突然就又好了，可是我忘记是哪个快捷键了。</p><p>终于复现成功并且知道解决办法了！！！！</p><p>如果无论是中文或者英文输入状态都只有英文标点符号（注意这里不是说只有半角符号，是中文特有的标点符号）</p><p>使用快捷键 **<code>ALT + .</code>**，又不是很确定了，刚发现还有种可能就是输入法自己抽风了…</p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
